{
  "title": "World",
  "description": "The global world variable is always available within the app scripting runtime.",
  "properties": [
    {
      "name": "networkId",
      "type": "String",
      "description": "A unique ID for the current server or client."
    },
    {
      "name": "isServer",
      "type": "Boolean",
      "description": "Whether the script is currently executing on the server."
    },
    {
      "name": "isClient",
      "type": "Boolean",
      "description": "Whether the script is currently executing on the client."
    }
  ],
  "methods": [
    {
      "name": "add(node)",
      "description": "Adds a node into world-space, outside of the app's local hierarchy.",
      "parameters": [
        {
          "name": "node",
          "type": "Node",
          "description": "The node to add to the world."
        }
      ]
    },
    {
      "name": "remove(node)",
      "description": "Removes a node from world-space, outside of the app's local hierarchy.",
      "parameters": [
        {
          "name": "node",
          "type": "Node",
          "description": "The node to remove from the world."
        }
      ]
    },
    {
      "name": "attach(node)",
      "description": "Adds a node into world-space, maintaining its current world transform.",
      "parameters": [
        {
          "name": "node",
          "type": "Node",
          "description": "The node to attach to the world."
        }
      ]
    },
    {
      "name": "on(event, callback)",
      "description": "Subscribes to world events. Currently only 'enter' and 'leave' are available which let you know when a player enters or leaves the world.",
      "parameters": [
        {
          "name": "event",
          "type": "String",
          "description": "The event to subscribe to ('enter' or 'leave')."
        },
        {
          "name": "callback",
          "type": "Function",
          "description": "The callback function to execute when the event is triggered."
        }
      ]
    },
    {
      "name": "off(event, callback)",
      "description": "Unsubscribes from world events.",
      "parameters": [
        {
          "name": "event",
          "type": "String",
          "description": "The event to unsubscribe from ('enter' or 'leave')."
        },
        {
          "name": "callback",
          "type": "Function",
          "description": "The callback function to remove from the event."
        }
      ]
    },
    {
      "name": "raycast(origin, direction, maxDistance, layerMask)",
      "description": "Raycasts the physics scene. If maxDistance is not specified, max distance is infinite. If layerMask is not specified, it will hit anything.",
      "parameters": [
        {
          "name": "origin",
          "type": "Vector3",
          "description": "The origin point of the ray."
        },
        {
          "name": "direction",
          "type": "Vector3",
          "description": "The direction of the ray."
        },
        {
          "name": "maxDistance",
          "type": "Number",
          "description": "The maximum distance the ray should travel. Defaults to infinite if not specified."
        },
        {
          "name": "layerMask",
          "type": "Number",
          "description": "A bitmask to filter which layers the ray should hit. Defaults to hitting everything if not specified."
        }
      ]
    },
    {
      "name": "createLayerMask(...groups)",
      "description": "Creates a bitmask to be used in world.raycast(). Currently the only groups available are 'environment' and 'player'.",
      "parameters": [
        {
          "name": "groups",
          "type": "String[]",
          "description": "The groups to include in the layer mask ('environment', 'player', etc.)."
        }
      ]
    },
    {
      "name": "getPlayer(playerId)",
      "description": "Returns a player. If no playerId is provided, it returns the local player.",
      "parameters": [
        {
          "name": "playerId",
          "type": "String",
          "description": "The ID of the player to retrieve. If not provided, returns the local player."
        }
      ]
    }
  ],
  "snippets": [
    {
      "id": "world-network-id",
      "name": "Get World Network ID",
      "description": "Get the unique ID for the current server or client.",
      "code": "const networkId = world.networkId;",
      "language": "javascript",
      "tags": ["world", "networkId"]
    },
    {
      "id": "world-is-server",
      "name": "Check if World is Server",
      "description": "Check if the script is currently executing on the server.",
      "code": "const isServer = world.isServer;",
      "language": "javascript",
      "tags": ["world", "isServer"]
    },
    {
      "id": "world-is-client",
      "name": "Check if World is Client",
      "description": "Check if the script is currently executing on the client.",
      "code": "const isClient = world.isClient;",
      "language": "javascript",
      "tags": ["world", "isClient"]
    },
    {
      "id": "world-add-node",
      "name": "Add Node to World",
      "description": "Adds a node into world-space, outside of the app's local hierarchy.",
      "code": "world.add(node);",
      "language": "javascript",
      "tags": ["world", "add", "node"]
    },
    {
      "id": "world-remove-node",
      "name": "Remove Node from World",
      "description": "Removes a node from world-space, outside of the app's local hierarchy.",
      "code": "world.remove(node);",
      "language": "javascript",
      "tags": ["world", "remove", "node"]
    },
    {
      "id": "world-attach-node",
      "name": "Attach Node to World",
      "description": "Adds a node into world-space, maintaining its current world transform.",
      "code": "world.attach(node);",
      "language": "javascript",
      "tags": ["world", "attach", "node"]
    },
    {
      "id": "world-on-event",
      "name": "Subscribe to World Event",
      "description": "Subscribes to world events. Currently 'enter' and 'leave' are available.",
      "code": "world.on('enter', (player) => {\n  // Player entered the world\n});\n\nworld.on('leave', (player) => {\n  // Player left the world\n});",
      "language": "javascript",
      "tags": ["world", "on", "event"]
    },
    {
      "id": "world-off-event",
      "name": "Unsubscribe from World Event",
      "description": "Unsubscribes from world events.",
      "code": "world.off('enter', onEnter);\n\n// Cleanup\nworld.off('enter', onEnter);",
      "language": "javascript",
      "tags": ["world", "off", "event"]
    },
    {
      "id": "world-raycast",
      "name": "Raycast in World",
      "description": "Raycasts the physics scene. If maxDistance is not specified, max distance is infinite. If layerMask is not specified, it will hit anything.",
      "code": "const hit = world.raycast(origin, direction, maxDistance, layerMask);",
      "language": "javascript",
      "tags": ["world", "raycast"]
    },
    {
      "id": "world-create-layer-mask",
      "name": "Create Layer Mask",
      "description": "Creates a bitmask to be used in world.raycast(). Currently the only groups available are 'environment' and 'player'.",
      "code": "const layer = world.createLayerMask('environment', 'player');",
      "language": "javascript",
      "tags": ["world", "createLayerMask"]
    },
    {
      "id": "world-get-player",
      "name": "Get Player",
      "description": "Returns a player. If no playerId is provided, it returns the local player.",
      "code": "const player = world.getPlayer(playerId); // For specific player\nconst localPlayer = world.getPlayer(); // For local player",
      "language": "javascript",
      "tags": ["world", "getPlayer"]
    }
  ]
}